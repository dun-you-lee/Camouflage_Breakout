<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\final_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\final_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Fri Jun 27 18:35:49 2025
<BR><P>
<H3>Maximum Stack Usage =        220 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; LCD_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAM_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[83]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">GPIO_AF12PPhigh</a> from stm324xg_lcd_ili9341.o(.text.GPIO_AF12PPhigh) referenced from stm324xg_lcd_ili9341.o(.text.LCD_Init)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.hidden_flow)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.level_1_flow)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.level_2_flow)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.level_3_flow)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.level_4_flow)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.level_5_flow)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.level_6_flow)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.level_selector_screen)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.overview)
 <LI><a href="#[61]">LCD_DisplayStringAt</a> from stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt) referenced from game.o(.text.start_screen)
 <LI><a href="#[62]">LCD_DrawRGBImage</a> from stm324xg_lcd_ili9341.o(.text.LCD_DrawRGBImage) referenced from game.o(.text.level_3_draw)
 <LI><a href="#[62]">LCD_DrawRGBImage</a> from stm324xg_lcd_ili9341.o(.text.LCD_DrawRGBImage) referenced from game.o(.text.level_5_flow)
 <LI><a href="#[62]">LCD_DrawRGBImage</a> from stm324xg_lcd_ili9341.o(.text.LCD_DrawRGBImage) referenced from game.o(.text.level_6_draw)
 <LI><a href="#[62]">LCD_DrawRGBImage</a> from stm324xg_lcd_ili9341.o(.text.LCD_DrawRGBImage) referenced from game.o(.text.overview)
 <LI><a href="#[60]">LCD_FillRect</a> from stm324xg_lcd_ili9341.o(.text.LCD_FillRect) referenced from game.o(.text.game_init)
 <LI><a href="#[60]">LCD_FillRect</a> from stm324xg_lcd_ili9341.o(.text.LCD_FillRect) referenced from game.o(.text.level_selector_screen)
 <LI><a href="#[64]">LCD_SetFont</a> from stm324xg_lcd_ili9341.o(.text.LCD_SetFont) referenced from game.o(.text.overview)
 <LI><a href="#[63]">LCD_SetTextColor</a> from stm324xg_lcd_ili9341.o(.text.LCD_SetTextColor) referenced from game.o(.text.level_selector_screen)
 <LI><a href="#[63]">LCD_SetTextColor</a> from stm324xg_lcd_ili9341.o(.text.LCD_SetTextColor) referenced from game.o(.text.overview)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from hardwaresystem_ini.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[5e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5d]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[67]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[68]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[69]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c8]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[72]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[c9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[da]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[db]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[66]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[71]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[73]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LCD_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[84]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[76]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[78]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7a]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_draw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayDevID
</UL>

<P><STRONG><a name="[80]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[81]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[e8]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[5d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[75]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ec]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ed]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ee]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>Cal_GetXY</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, touch_module.o(.text.Cal_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cal_GetXY
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pixel_Width
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pixel_Height
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
</UL>

<P><STRONG><a name="[88]"></a>Default_Calibration</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, touch_module.o(.text.Default_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Default_Calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pixel_Width
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>Delay_SPI</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, driver_spi.o(.text.Delay_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_SPIWrite
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_SPIRead
</UL>

<P><STRONG><a name="[c0]"></a>Driver_GPIO</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, driver_spi.o(.text.Driver_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Driver_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Driver_SPICS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, driver_spi.o(.text.Driver_SPICS))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetVal
</UL>

<P><STRONG><a name="[93]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32f4xx_fsmc.o(.text.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[91]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, stm32f4xx_fsmc.o(.text.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[92]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f4xx_fsmc.o(.text.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, hardwaresystem_ini.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4_Hardware_Init
</UL>

<P><STRONG><a name="[89]"></a>LCD_Clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm324xg_lcd_ili9341.o(.text.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Clear &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWin
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[8b]"></a>LCD_DisplayDevID</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm324xg_lcd_ili9341.o(.text.LCD_DisplayDevID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LCD_DisplayDevID &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLineCol
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[61]"></a>LCD_DisplayStringAt</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_DisplayStringAt &rArr; LCD_DisplayStringSegment &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_draw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
</UL>
<BR>[Address Reference Count : 10]<UL><LI> game.o(.text.start_screen)
<LI> game.o(.text.overview)
<LI> game.o(.text.level_1_flow)
<LI> game.o(.text.level_3_flow)
<LI> game.o(.text.level_2_flow)
<LI> game.o(.text.level_4_flow)
<LI> game.o(.text.level_5_flow)
<LI> game.o(.text.level_6_flow)
<LI> game.o(.text.hidden_flow)
<LI> game.o(.text.level_selector_screen)
</UL>
<P><STRONG><a name="[8c]"></a>LCD_DisplayStringLineCol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringLineCol))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DisplayStringLineCol &rArr; LCD_DisplayStringSegment &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayDevID
</UL>

<P><STRONG><a name="[8e]"></a>LCD_DrawLine</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm324xg_lcd_ili9341.o(.text.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPixel &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_hit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bite
</UL>

<P><STRONG><a name="[8f]"></a>LCD_DrawPixel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm324xg_lcd_ili9341.o(.text.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_DrawPixel &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWin
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_splatter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boom
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[62]"></a>LCD_DrawRGBImage</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm324xg_lcd_ili9341.o(.text.LCD_DrawRGBImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWin
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_screen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_draw
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_draw
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_draw
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_draw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_draw
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_draw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_draw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
</UL>
<BR>[Address Reference Count : 4]<UL><LI> game.o(.text.overview)
<LI> game.o(.text.level_3_draw)
<LI> game.o(.text.level_5_flow)
<LI> game.o(.text.level_6_draw)
</UL>
<P><STRONG><a name="[90]"></a>LCD_FSMCConfig</STRONG> (Thumb, 164 bytes, Stack size 136 bytes, stm324xg_lcd_ili9341.o(.text.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LCD_FSMCConfig &rArr; FSMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[60]"></a>LCD_FillRect</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm324xg_lcd_ili9341.o(.text.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_FillRect &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWin
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overview
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_splatter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boom
</UL>
<BR>[Address Reference Count : 2]<UL><LI> game.o(.text.game_init)
<LI> game.o(.text.level_selector_screen)
</UL>
<P><STRONG><a name="[94]"></a>LCD_Init</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, stm324xg_lcd_ili9341.o(.text.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayDevID
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_outPPhigh
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>LCD_OpenWin</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm324xg_lcd_ili9341.o(.text.LCD_OpenWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_OpenWin
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringSegment
</UL>

<P><STRONG><a name="[87]"></a>LCD_Pixel_Height</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm324xg_lcd_ili9341.o(.text.LCD_Pixel_Height))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_GetXY
</UL>

<P><STRONG><a name="[86]"></a>LCD_Pixel_Width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm324xg_lcd_ili9341.o(.text.LCD_Pixel_Width))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_GetXY
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Calibration
</UL>

<P><STRONG><a name="[96]"></a>LCD_Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm324xg_lcd_ili9341.o(.text.LCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Reset &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[64]"></a>LCD_SetFont</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm324xg_lcd_ili9341.o(.text.LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_screen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_selector_screen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game.o(.text.overview)
</UL>
<P><STRONG><a name="[63]"></a>LCD_SetTextColor</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm324xg_lcd_ili9341.o(.text.LCD_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_screen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_draw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_splatter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_hit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boom
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bite
</UL>
<BR>[Address Reference Count : 2]<UL><LI> game.o(.text.overview)
<LI> game.o(.text.level_selector_screen)
</UL>
<P><STRONG><a name="[99]"></a>RNG_Get_RandomNum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rng.o(.text.RNG_Get_RandomNum))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
</UL>

<P><STRONG><a name="[98]"></a>RNG_Get_RandomRange</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rng.o(.text.RNG_Get_RandomRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RNG_Get_RandomRange
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_draw
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_draw
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_draw
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_draw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_draw
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_draw
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_draw
</UL>

<P><STRONG><a name="[9a]"></a>RNG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rng.o(.text.RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RNG_Init &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaresystem_ini.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>TSC_TouchDet</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, touch_module.o(.text.TSC_TouchDet))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TSC_TouchDet &rArr; Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetVal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_selector
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_next_level
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_screen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_page
</UL>

<P><STRONG><a name="[9d]"></a>TS_GetState</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, touch_module.o(.text.TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TS_GetState &rArr; Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetVal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_GetXY
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_selector
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_next_level
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_screen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_page
</UL>

<P><STRONG><a name="[9c]"></a>Touch_GetVal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, touch_module.o(.text.Touch_GetVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_SPIWrite
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_SPIRead
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SPICS
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
</UL>

<P><STRONG><a name="[a0]"></a>Touch_SPIRead</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, driver_spi.o(.text.Touch_SPIRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Touch_SPIRead &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetVal
</UL>

<P><STRONG><a name="[9f]"></a>Touch_SPIWrite</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, driver_spi.o(.text.Touch_SPIWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetVal
</UL>

<P><STRONG><a name="[a2]"></a>WaitForTouchRelease</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, touch_module.o(.text.WaitForTouchRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WaitForTouchRelease &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_selector
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_next_level
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_screen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_page
</UL>

<P><STRONG><a name="[a3]"></a>control_page</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, game.o(.text.control_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = control_page &rArr; TSC_TouchDet &rArr; Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>control_screen</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, game.o(.text.control_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = control_screen &rArr; TSC_TouchDet &rArr; Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>delay_ms</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm324xg_lcd_ili9341.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
</UL>

<P><STRONG><a name="[a5]"></a>draw_bite</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, game.o(.text.draw_bite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_bite &rArr; LCD_DrawLine &rArr; LCD_DrawPixel &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
</UL>

<P><STRONG><a name="[a6]"></a>draw_boom</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, game.o(.text.draw_boom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = draw_boom &rArr; LCD_FillRect &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
</UL>

<P><STRONG><a name="[a7]"></a>draw_border</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, game.o(.text.draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = draw_border &rArr; LCD_DrawPixel &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
</UL>

<P><STRONG><a name="[a8]"></a>draw_heal</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, game.o(.text.draw_heal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = draw_heal &rArr; LCD_DrawPixel &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
</UL>

<P><STRONG><a name="[a9]"></a>draw_hit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, game.o(.text.draw_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_hit &rArr; LCD_DrawLine &rArr; LCD_DrawPixel &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
</UL>

<P><STRONG><a name="[aa]"></a>draw_slash</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, game.o(.text.draw_slash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_slash &rArr; LCD_DrawLine &rArr; LCD_DrawPixel &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
</UL>

<P><STRONG><a name="[ab]"></a>draw_splatter</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, game.o(.text.draw_splatter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = draw_splatter &rArr; LCD_FillRect &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
</UL>

<P><STRONG><a name="[ac]"></a>game_init</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, game.o(.text.game_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = game_init &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>game_over</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, game.o(.text.game_over))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = game_over &rArr; TSC_TouchDet &rArr; Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>hidden_draw</STRONG> (Thumb, 2548 bytes, Stack size 32 bytes, game.o(.text.hidden_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hidden_draw &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>hidden_flow</STRONG> (Thumb, 1568 bytes, Stack size 32 bytes, game.o(.text.hidden_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hidden_flow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>judge_next_level</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, game.o(.text.judge_next_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = judge_next_level &rArr; TSC_TouchDet &rArr; Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>level_1_draw</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, game.o(.text.level_1_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = level_1_draw &rArr; LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>level_1_flow</STRONG> (Thumb, 2212 bytes, Stack size 40 bytes, game.o(.text.level_1_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = level_1_flow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_hit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boom
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>level_2_draw</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, game.o(.text.level_2_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = level_2_draw &rArr; LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>level_2_flow</STRONG> (Thumb, 2864 bytes, Stack size 40 bytes, game.o(.text.level_2_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = level_2_flow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>level_3_draw</STRONG> (Thumb, 876 bytes, Stack size 40 bytes, game.o(.text.level_3_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = level_3_draw &rArr; LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>level_3_flow</STRONG> (Thumb, 2368 bytes, Stack size 40 bytes, game.o(.text.level_3_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = level_3_flow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_splatter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slash
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>level_4_draw</STRONG> (Thumb, 1100 bytes, Stack size 40 bytes, game.o(.text.level_4_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = level_4_draw &rArr; LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>level_4_flow</STRONG> (Thumb, 6112 bytes, Stack size 40 bytes, game.o(.text.level_4_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = level_4_flow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_hit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_boom
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>level_5_draw</STRONG> (Thumb, 1760 bytes, Stack size 40 bytes, game.o(.text.level_5_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = level_5_draw &rArr; LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>level_5_flow</STRONG> (Thumb, 6836 bytes, Stack size 40 bytes, game.o(.text.level_5_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = level_5_flow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>level_6_draw</STRONG> (Thumb, 1716 bytes, Stack size 40 bytes, game.o(.text.level_6_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = level_6_draw &rArr; LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>level_6_flow</STRONG> (Thumb, 5560 bytes, Stack size 40 bytes, game.o(.text.level_6_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = level_6_flow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_splatter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>level_selector</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, game.o(.text.level_selector))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = level_selector &rArr; TSC_TouchDet &rArr; Touch_GetVal &rArr; Touch_SPIWrite &rArr; Delay_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTouchRelease
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_GetState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchDet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>level_selector_screen</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, game.o(.text.level_selector_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = level_selector_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = main &rArr; LCD_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Calibration
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_screen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overview
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_selector_screen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_selector
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_flow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_6_draw
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_flow
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_5_draw
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_flow
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_4_draw
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_flow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_3_draw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_flow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_2_draw
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_flow
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_1_draw
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_next_level
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_flow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidden_draw
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_screen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_page
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_GPIO
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4_Hardware_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c2]"></a>overview</STRONG> (Thumb, 2116 bytes, Stack size 40 bytes, game.o(.text.overview))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = overview &rArr; LCD_FillRect &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>start_screen</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, game.o(.text.start_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = start_screen &rArr; LCD_DrawRGBImage &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGBImage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>stm32f4_Hardware_Init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, hardwaresystem_ini.o(.text.stm32f4_Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32f4_Hardware_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_getPCLKx_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6e]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[f1]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[f2]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c4]"></a>my_getPCLKx_Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hardwaresystem_ini.o(.text.my_getPCLKx_Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4_Hardware_Init
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_AF12PPhigh</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, stm324xg_lcd_ili9341.o(.text.GPIO_AF12PPhigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_AF12PPhigh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm324xg_lcd_ili9341.o(.text.LCD_Init)
</UL>
<P><STRONG><a name="[95]"></a>GPIO_outPPhigh</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm324xg_lcd_ili9341.o(.text.GPIO_outPPhigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_outPPhigh
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[8d]"></a>LCD_DisplayStringSegment</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, stm324xg_lcd_ili9341.o(.text.LCD_DisplayStringSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_DisplayStringSegment &rArr; LCD_OpenWin
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWin
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLineCol
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[5e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
